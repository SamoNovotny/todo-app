{"version":3,"sources":["Components/ToDoItem.tsx","Components/Filter.tsx","Components/ListMenu.tsx","Components/ToDoList.tsx","Components/MyModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StatusEnum","iconStyle","DoneIcon","styled","TaskAltRoundedIcon","_templateObject","Object","taggedTemplateLiteral","InProgressIcon","AccessTimeOutlinedIcon","_templateObject2","LoaderIcon","CircularProgress","_templateObject3","ToDoItem","_ref","listId","id","title","description","deadline","status","setList","list","setShowList","showList","_useState","useState","_useState2","slicedToArray","myStatus","setMyStatus","_useState3","_useState4","isPosting","setIsPosting","react_default","a","createElement","Card","variant","sx","overflow","position","width","onClick","event","stopPropagation","newList","filter","item","update","Active","Done","console","log","client","put","concat","tasks","toConsumableArray","then","response","CardContent","style","display","justifyContent","Typography","component","DeleteOutline_default","mb","color","toDate","toLocaleString","size","StyledChip","Chip","Filter_templateObject","props","backgroundColor","Filter","filterConfiguration","setFilterConfiguration","handleClickOnChip","configuration","Box","mt","gutterBottom","Stack","direction","spacing","label","MenuIcon","MoreHorizOutlinedIcon","ListMenu_templateObject","iconSize","FilterIcon","FilterAltOutlinedIcon","ListMenu_templateObject2","ActiveFilterIcon","FilterAltIcon","ListMenu_templateObject3","MySearchIcon","SearchIcon","_templateObject4","ListMenu","showFilter","setShowFilter","setExpandToDoList","showSearch","setShowSearch","expandMenu","setExpandMenu","isRotating","setIsRotating","handleClickOnFilterIcon","marginBottom","Fragment","setTimeout","className","undefined","StyledBox","ToDoList_templateObject","StyledLinearProgress","LinearProgress","ToDoList_templateObject2","linearProgressClasses","bar","barColor","StyledDiv","ToDoList_templateObject3","StyledContainedButton","Button","ToDoList_templateObject4","StyledOutlinedButton","_templateObject5","lineColor","StyledDeleteIcon","DeleteIcon","_templateObject6","fillColor","StyledTextField","TextField","_templateObject7","StyledDateTimePicker","DateTimePicker","_templateObject8","StyledCardActions","CardActions","_templateObject9","ToDoList","listTitle","expandToDoList","addNewTask","setAddNewTask","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","keyword","setKeyword","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","setTitle","_useState17","_useState18","setDescription","_useState19","dayjs","_useState20","setDeadline","_useState21","_useState22","progress","setProgress","_useState23","_useState24","itemsCount","setItemsCount","_useState25","_useState26","useEffect","get","data","map","Number","doneItemsCount","length","sort","item1","item2","diff","LocalizationProvider","dateAdapter","AdapterDayjs","ml","marginRight","Components_ListMenu","value","onChange","target","toLowerCase","includes","Components_Filter","textAlign","mr","Components_ToDoItem","noValidate","autoComplete","multiline","maxRows","renderInput","params","startIcon","MyModal","showModal","handleClickCloseModal","handleChangeTitle","handleClickOnAdd","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","axios","create","baseURL","StyledTypography","App_templateObject","ContentGrid","Grid","App_templateObject2","MyAddIcon","AddIcon","App_templateObject3","colorPalette","App","setData","setShowModal","container","m","p","xs","md","columns","sm","key","Components_ToDoList","Components_MyModal","post","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6ddba0d0.chunk.js","sourcesContent":["import React, { FC, useState } from 'react'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport Card from '@mui/material/Card'\r\nimport Typography from '@mui/material/Typography'\r\nimport TaskAltRoundedIcon from '@mui/icons-material/TaskAltRounded'\r\nimport AccessTimeOutlinedIcon from '@mui/icons-material/AccessTimeOutlined'\r\nimport { styled } from '@mui/system'\r\nimport { Dayjs } from 'dayjs'\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline'\r\nimport { client } from '../App'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\nexport enum StatusEnum {\r\n    Active,\r\n    Done,\r\n}\r\n\r\nexport interface IToDoItem {\r\n    id: number\r\n    title: string\r\n    description: string\r\n    deadline: Dayjs\r\n    status: StatusEnum\r\n}\r\n\r\nexport interface Props {\r\n    listId: number\r\n    id: number\r\n    title: string\r\n    description: string\r\n    deadline: Dayjs\r\n    status: StatusEnum\r\n    setList: React.Dispatch<React.SetStateAction<IToDoItem[]>>\r\n    list: IToDoItem[]\r\n    setShowList: React.Dispatch<React.SetStateAction<IToDoItem[]>>\r\n    showList: IToDoItem[]\r\n}\r\n\r\nconst iconStyle = `\r\n    position: absolute;\r\n    top: calc(50% - 20px);\r\n    right: -20px;\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: white;\r\n`\r\n\r\nconst DoneIcon = styled(TaskAltRoundedIcon)`\r\n    ${iconStyle}\r\n    fill: #20bd04;\r\n`\r\nconst InProgressIcon = styled(AccessTimeOutlinedIcon)`\r\n    ${iconStyle}\r\n    fill: #fcdb0b;\r\n`\r\nconst LoaderIcon = styled(CircularProgress)`\r\n    position: absolute;\r\n    top: calc(50% - 17px);\r\n    right: -17px;\r\n    background-color: white;\r\n    fill: red;\r\n`\r\n\r\nconst ToDoItem: FC<Props> = ({\r\n    listId,\r\n    id,\r\n    title,\r\n    description,\r\n    deadline,\r\n    status,\r\n    setList,\r\n    list,\r\n    setShowList,\r\n    showList,\r\n}): JSX.Element => {\r\n    const [myStatus, setMyStatus] = useState<StatusEnum>(status)\r\n    const [isPosting, setIsPosting] = useState<boolean>(false)\r\n\r\n    const handleClickOnToDoItem = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        setIsPosting(true)\r\n        const newList = list.filter(item => item.id != id)\r\n        const update = {\r\n            id: id,\r\n            title: title,\r\n            deadline: deadline,\r\n            description: description,\r\n            status:\r\n                myStatus == StatusEnum.Active\r\n                    ? StatusEnum.Done\r\n                    : StatusEnum.Active,\r\n        }\r\n        console.log(newList)\r\n        client\r\n            .put(`/todoList/${listId}`, {\r\n                tasks: [...newList, update],\r\n            })\r\n            .then(response => {\r\n                setIsPosting(false)\r\n                if (response.status == 200) {\r\n                    setMyStatus(\r\n                        myStatus == StatusEnum.Active\r\n                            ? StatusEnum.Done\r\n                            : StatusEnum.Active\r\n                    )\r\n                    setList([...newList, update])\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleClickOnDeleteIcon = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        const newList = list.filter(item => item.id != id)\r\n        console.log(newList)\r\n        client\r\n            .put(`/todoList/${listId}`, {\r\n                tasks: newList,\r\n            })\r\n            .then(response => {\r\n                console.log(response)\r\n                if (response.status == 200) {\r\n                    setList(newList)\r\n                    setShowList(showList.filter(item => item.id != id))\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            variant=\"outlined\"\r\n            sx={{\r\n                overflow: 'visible',\r\n                position: 'relative',\r\n                width: 'calc(100% - 20px)',\r\n            }}\r\n            onClick={handleClickOnToDoItem}\r\n        >\r\n            <CardContent>\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <Typography variant=\"h6\" component=\"span\">\r\n                        {title}\r\n                    </Typography>\r\n                    <DeleteOutlineIcon onClick={handleClickOnDeleteIcon} />\r\n                </div>\r\n                <Typography\r\n                    sx={{ mb: 1.5 }}\r\n                    color=\"text.secondary\"\r\n                    component=\"div\"\r\n                >\r\n                    {deadline.toDate().toLocaleString()}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"div\">\r\n                    {description}\r\n                </Typography>\r\n                {isPosting ? (\r\n                    <LoaderIcon\r\n                        size={34}\r\n                        style={{\r\n                            color:\r\n                                myStatus == StatusEnum.Done\r\n                                    ? '#20bd04'\r\n                                    : '#fcdb0b',\r\n                        }}\r\n                    />\r\n                ) : myStatus == StatusEnum.Done ? (\r\n                    <DoneIcon />\r\n                ) : (\r\n                    <InProgressIcon />\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoItem\r\n","import React, { FC, useState } from 'react'\r\nimport Typography from '@mui/material/Typography'\r\nimport { Box } from '@mui/material'\r\nimport Chip from '@mui/material/Chip'\r\nimport Stack from '@mui/material/Stack'\r\nimport { IToDoItem } from './ToDoItem'\r\nimport { StatusEnum } from './ToDoItem'\r\nimport { styled } from '@mui/system'\r\n\r\nconst StyledChip = styled(Chip)`\r\n    background-color: ${(props: { backgroundColor: any }) =>\r\n        props.backgroundColor};\r\n    &:hover {\r\n        background-color: ${(props: { backgroundColor: string }) =>\r\n            props.backgroundColor};\r\n    }\r\n`\r\n\r\ninterface Props {\r\n    list: IToDoItem[]\r\n    setShowList: React.Dispatch<React.SetStateAction<IToDoItem[]>>\r\n    color: string\r\n}\r\n\r\nconst Filter: FC<Props> = ({ list, setShowList, color }): JSX.Element => {\r\n    const [\r\n        filterConfiguration,\r\n        setFilterConfiguration,\r\n    ] = useState<StatusEnum | null>(null)\r\n\r\n    const handleClickOnChip = (\r\n        event: { stopPropagation: () => void },\r\n        configuration: StatusEnum | null\r\n    ) => {\r\n        event.stopPropagation()\r\n        setFilterConfiguration(configuration)\r\n        if (configuration == null) {\r\n            setShowList(list)\r\n        } else {\r\n            setShowList(list.filter(item => item.status == configuration))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ mt: 2, mb: 2 }}>\r\n            <Typography gutterBottom variant=\"body1\">\r\n                Select type\r\n            </Typography>\r\n            <Stack direction=\"row\" spacing={1}>\r\n                <StyledChip\r\n                    label=\"All\"\r\n                    backgroundColor={\r\n                        filterConfiguration == null ? color : 'default'\r\n                    }\r\n                    onClick={event => handleClickOnChip(event, null)}\r\n                />\r\n                <StyledChip\r\n                    label=\"Active\"\r\n                    backgroundColor={\r\n                        filterConfiguration == StatusEnum.Active\r\n                            ? color\r\n                            : 'default'\r\n                    }\r\n                    onClick={event =>\r\n                        handleClickOnChip(event, StatusEnum.Active)\r\n                    }\r\n                />\r\n                <StyledChip\r\n                    label=\"Done\"\r\n                    backgroundColor={\r\n                        filterConfiguration == StatusEnum.Done\r\n                            ? color\r\n                            : 'default'\r\n                    }\r\n                    onClick={event => handleClickOnChip(event, StatusEnum.Done)}\r\n                />\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","import React, { FC, useState } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport FilterAltIcon from '@mui/icons-material/FilterAlt'\r\nimport MoreHorizOutlinedIcon from '@mui/icons-material/MoreHorizOutlined'\r\nimport FilterAltOutlinedIcon from '@mui/icons-material/FilterAltOutlined'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport { IToDoItem } from './ToDoItem'\r\nimport TextField from '@mui/material/TextField'\r\n\r\nconst iconSize = 35\r\n\r\nconst iconStyle = `\r\n    width: ${iconSize}px;\r\n    height: ${iconSize}px;\r\n    background-color: #f0f0f0;\r\n    border-radius: 50%;\r\n    margin-left: 5px;\r\n`\r\n\r\nconst MenuIcon = styled(MoreHorizOutlinedIcon)`\r\n    ${iconStyle}\r\n    position: relative;\r\n    &.left-rotation {\r\n        animation-name: left-spin;\r\n        animation-duration: 500ms;\r\n\r\n        @keyframes left-spin {\r\n            0% {\r\n                transform: translate(0, 0) rotate(0deg);\r\n            }\r\n            100% {\r\n                transform: translate(-${iconSize * 3.14}px, 0) rotate(-360deg);\r\n            }\r\n        }\r\n    }\r\n\r\n    &.right-rotation {\r\n        animation-name: right-spin;\r\n        animation-duration: 500ms;\r\n\r\n        @keyframes right-spin {\r\n            0% {\r\n                transform: translate(-${iconSize * 3.14}px, 0) rotate(-360deg);\r\n            }\r\n            100% {\r\n                transform: translate(0, 0) rotate(0deg);\r\n            }\r\n        }\r\n    }\r\n\r\n    &.expanded {\r\n        transform: translate(-${iconSize * 3.14}px, 0);\r\n    }\r\n`\r\n\r\nconst FilterIcon = styled(FilterAltOutlinedIcon)`\r\n    ${iconStyle}\r\n    transform: translate(${iconSize + 5}px, 0);\r\n`\r\n\r\nconst ActiveFilterIcon = styled(FilterAltIcon)`\r\n    ${iconStyle}\r\n    transform: translate(${iconSize + 5}px, 0);\r\n`\r\n\r\nconst MySearchIcon = styled(SearchIcon)`\r\n    ${iconStyle}\r\n    position: relative;\r\n    transform: translate(${2 * iconSize + 10 - (iconSize * 3.14) / 2}px, 0);\r\n`\r\n\r\ninterface Props {\r\n    showFilter: boolean\r\n    setShowFilter: React.Dispatch<React.SetStateAction<boolean>>\r\n    list: IToDoItem[]\r\n    setShowList: React.Dispatch<React.SetStateAction<IToDoItem[]>>\r\n    setExpandToDoList: React.Dispatch<React.SetStateAction<boolean>>\r\n    showSearch: boolean\r\n    setShowSearch: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nconst ListMenu: FC<Props> = ({\r\n    showFilter,\r\n    setShowFilter,\r\n    list,\r\n    setShowList,\r\n    setExpandToDoList,\r\n    showSearch,\r\n    setShowSearch,\r\n}): JSX.Element => {\r\n    const [expandMenu, setExpandMenu] = useState<boolean>(false)\r\n    const [isRotating, setIsRotating] = useState<boolean>(false)\r\n\r\n    const handleClickOnMenuIcon = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        setIsRotating(true)\r\n        setTimeout(() => {\r\n            setIsRotating(false)\r\n            setExpandMenu(!expandMenu)\r\n        }, 500)\r\n    }\r\n\r\n    const handleClickOnFilterIcon = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        if (!showFilter) {\r\n            setShowSearch(false)\r\n        }\r\n        setShowList(list)\r\n        setShowFilter(!showFilter)\r\n        setExpandToDoList(true)\r\n    }\r\n\r\n    const handleClickOnMySearchIcon = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        if (!showSearch) {\r\n            setShowFilter(false)\r\n        }\r\n        setShowList(list)\r\n        setShowSearch(!showSearch)\r\n        setExpandToDoList(true)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: '100%',\r\n                justifyContent: 'flex-end',\r\n                display: 'flex',\r\n                marginBottom: '16px',\r\n            }}\r\n        >\r\n            {expandMenu && (\r\n                <>\r\n                    <MySearchIcon onClick={handleClickOnMySearchIcon} />\r\n                    {!showFilter ? (\r\n                        <FilterIcon onClick={handleClickOnFilterIcon} />\r\n                    ) : (\r\n                        <ActiveFilterIcon onClick={handleClickOnFilterIcon} />\r\n                    )}\r\n                </>\r\n            )}\r\n            <MenuIcon\r\n                onClick={handleClickOnMenuIcon}\r\n                className={\r\n                    isRotating && !expandMenu\r\n                        ? 'left-rotation'\r\n                        : isRotating\r\n                        ? 'right-rotation'\r\n                        : expandMenu\r\n                        ? 'expanded'\r\n                        : undefined\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListMenu\r\n","import React, { FC, useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport ToDoItem, { IToDoItem, StatusEnum } from './ToDoItem'\r\nimport Card from '@mui/material/Card'\r\nimport CardContent from '@mui/material/CardContent'\r\nimport CardActions from '@mui/material/CardActions'\r\nimport Button from '@mui/material/Button'\r\nimport Typography from '@mui/material/Typography'\r\nimport { Box } from '@mui/material'\r\nimport LinearProgress, {\r\n    linearProgressClasses,\r\n} from '@mui/material/LinearProgress'\r\nimport Filter from './Filter'\r\nimport ListMenu from './ListMenu'\r\nimport TextField from '@mui/material/TextField'\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker'\r\nimport dayjs, { Dayjs } from 'dayjs'\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\r\nimport { LocalizationProvider } from '@mui/x-date-pickers'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport { client } from '../App'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\nexport interface IToDoList {\r\n    listId: number\r\n    listTitle: string\r\n    color: string\r\n}\r\n\r\nconst StyledBox = styled(Box)`\r\n    display: flex;\r\n    align-items: end;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst StyledLinearProgress = styled(LinearProgress)`\r\n    background-color: #f0f0f0;\r\n    .${linearProgressClasses.bar} {\r\n        background-color: ${(props: { barColor: string }) => props.barColor};\r\n    }\r\n`\r\n\r\nconst StyledDiv = styled('div')`\r\n    max-height: 350px;\r\n    overflow-y: auto;\r\n    ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n`\r\n\r\nexport const StyledContainedButton = styled(Button)`\r\n    background-color: ${(props: { backgroundColor: string }) =>\r\n        props.backgroundColor};\r\n    &:hover {\r\n        background-color: ${(props: { backgroundColor: string }) =>\r\n            props.backgroundColor};\r\n    }\r\n`\r\nexport const StyledOutlinedButton = styled(Button)`\r\n    border-color: ${(props: { lineColor: string }) => props.lineColor};\r\n    color: ${(props: { lineColor: string }) => props.lineColor};\r\n\r\n    &:active {\r\n        background-color: ${(props: { lineColor: string }) => props.lineColor}+\r\n            '45';\r\n    }\r\n\r\n    &:hover {\r\n        background-color: ${(props: { lineColor: string }) => props.lineColor}+\r\n            '0f';\r\n        border-color: ${(props: { lineColor: string }) => props.lineColor};\r\n    }\r\n`\r\n\r\nconst StyledDeleteIcon = styled(DeleteIcon)`\r\n    fill: ${(props: { fillColor: string }) => props.fillColor};\r\n`\r\n\r\nconst StyledTextField = styled(TextField)`\r\n    margin-top: 8px;\r\n    width: calc(100% - 16px);\r\n`\r\nconst StyledDateTimePicker = styled(DateTimePicker)`\r\n    margin-top: 8px;\r\n    width: calc(100% - 16px);\r\n`\r\n\r\nconst StyledCardActions = styled(CardActions)`\r\n    margin-bottom: 16px;\r\n    margin-right: 16px;\r\n    margin-left: 16px;\r\n    padding: 0;\r\n    padding-right: 16px;\r\n    padding-left: 16px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst ToDoList: FC<IToDoList> = ({ listId, listTitle, color }): JSX.Element => {\r\n    const [expandToDoList, setExpandToDoList] = useState<boolean>(false)\r\n    const [addNewTask, setAddNewTask] = useState<boolean>(false)\r\n    const [showFilter, setShowFilter] = useState<boolean>(false)\r\n    const [showSearch, setShowSearch] = useState<boolean>(false)\r\n    const [keyword, setKeyword] = useState<string>('')\r\n    const [showList, setShowList] = useState<IToDoItem[]>([])\r\n    const [list, setList] = useState<IToDoItem[]>([])\r\n    const [title, setTitle] = useState<string>('')\r\n    const [description, setDescription] = useState<string>('')\r\n    const [deadline, setDeadline] = useState<Dayjs>(dayjs())\r\n    const [progress, setProgress] = useState<number>(0)\r\n    const [itemsCount, setItemsCount] = useState<number>(0)\r\n    const [isPosting, setIsPosting] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        client.get(`/todoList/${listId}`).then(response => {\r\n            const data = response.data.tasks.map(\r\n                (item: {\r\n                    id: any\r\n                    title: any\r\n                    description: any\r\n                    deadline:\r\n                        | string\r\n                        | number\r\n                        | Date\r\n                        | dayjs.Dayjs\r\n                        | null\r\n                        | undefined\r\n                    status: string\r\n                }) => {\r\n                    return {\r\n                        id: Number(item.id),\r\n                        title: item.title,\r\n                        description: item.description,\r\n                        deadline: dayjs(item.deadline),\r\n                        status: item.status,\r\n                    }\r\n                }\r\n            )\r\n            setList(data)\r\n            setShowList(data)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const doneItemsCount = list.filter(\r\n            item => item.status == StatusEnum.Done\r\n        ).length\r\n        setItemsCount(list.length)\r\n        setProgress((doneItemsCount / list.length) * 100)\r\n        showList.sort((item1, item2) => item1.deadline.diff(item2.deadline))\r\n    }, [list])\r\n\r\n    const handleClickOnToDoList = (): void => {\r\n        setExpandToDoList(!expandToDoList)\r\n    }\r\n\r\n    const handleClickOnNewTaskButton = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        setAddNewTask(true)\r\n        setShowList(list)\r\n        setShowFilter(false)\r\n        setShowSearch(false)\r\n    }\r\n\r\n    const handleChangeTitle = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        setTitle(event.target.value)\r\n    }\r\n\r\n    const handleChangeDescription = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        setDescription(event.target.value)\r\n    }\r\n\r\n    const handleChangeDeadline = (data: any): void => {\r\n        setDeadline(dayjs(data))\r\n    }\r\n\r\n    const handleChangeKeyword = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        setKeyword(event.target.value)\r\n        setShowList(\r\n            list.filter(\r\n                item =>\r\n                    item.title\r\n                        .toLowerCase()\r\n                        .includes(event.target.value.toLowerCase()) ||\r\n                    item.description\r\n                        .toLowerCase()\r\n                        .includes(event.target.value.toLowerCase())\r\n            )\r\n        )\r\n    }\r\n\r\n    const handleClickOnSubmitButton = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        setIsPosting(true)\r\n        const newList = [\r\n            ...list,\r\n            {\r\n                id: list.length == 0 ? 1 : list[list.length - 1].id + 1,\r\n                title: title,\r\n                description: description,\r\n                deadline: deadline,\r\n                status: StatusEnum.Active,\r\n            },\r\n        ]\r\n        client\r\n            .put(`/todoList/${listId}`, {\r\n                tasks: newList,\r\n            })\r\n            .then(response => {\r\n                if (response.status == 200) {\r\n                    setList(newList)\r\n                    setShowList(newList)\r\n                    setIsPosting(false)\r\n                }\r\n                setAddNewTask(false)\r\n                setExpandToDoList(true)\r\n                setTitle('')\r\n                setDescription('')\r\n                setDeadline(dayjs())\r\n            })\r\n    }\r\n\r\n    const handleClickOnDeleteButton = (event: {\r\n        stopPropagation: () => void\r\n    }): void => {\r\n        event.stopPropagation()\r\n        setAddNewTask(false)\r\n        setExpandToDoList(true)\r\n        setTitle('')\r\n        setDescription('')\r\n        setDeadline(dayjs())\r\n    }\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <Card\r\n                variant=\"outlined\"\r\n                sx={{ position: 'relative' }}\r\n                onClick={handleClickOnToDoList}\r\n            >\r\n                <CardContent sx={{ ml: 2, mb: 1 }}>\r\n                    <div style={{ marginRight: '16px' }}>\r\n                        <ListMenu\r\n                            showFilter={showFilter}\r\n                            setShowFilter={setShowFilter}\r\n                            list={list}\r\n                            setShowList={setShowList}\r\n                            setExpandToDoList={setExpandToDoList}\r\n                            showSearch={showSearch}\r\n                            setShowSearch={setShowSearch}\r\n                        />\r\n                        <StyledBox>\r\n                            <Typography variant=\"h4\" component=\"span\">\r\n                                {listTitle}\r\n                            </Typography>\r\n                            <Typography variant=\"body1\" component=\"span\">\r\n                                {itemsCount} task\r\n                                {itemsCount != 1 && 's'}\r\n                            </Typography>\r\n                        </StyledBox>\r\n                        <StyledLinearProgress\r\n                            variant=\"determinate\"\r\n                            sx={{ mt: 1, mb: 2 }}\r\n                            value={progress}\r\n                            barColor={color}\r\n                        />\r\n                        {showSearch && (\r\n                            <StyledTextField\r\n                                sx={{ width: '100%' }}\r\n                                id=\"outlined-basic\"\r\n                                label=\"Enter keyword to search\"\r\n                                variant=\"outlined\"\r\n                                value={keyword}\r\n                                onChange={handleChangeKeyword}\r\n                                onClick={event => event.stopPropagation()}\r\n                            />\r\n                        )}\r\n                        {showFilter && (\r\n                            <Filter\r\n                                list={list}\r\n                                setShowList={setShowList}\r\n                                color={color}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                    <StyledDiv>\r\n                        {expandToDoList &&\r\n                            !addNewTask &&\r\n                            (showList.length == 0 ? (\r\n                                <Typography\r\n                                    variant=\"body1\"\r\n                                    component=\"div\"\r\n                                    sx={{ textAlign: 'center', mr: 2, mt: 2 }}\r\n                                >\r\n                                    There are no{' '}\r\n                                    {(showFilter || showSearch) && 'such '}\r\n                                    tasks\r\n                                </Typography>\r\n                            ) : (\r\n                                showList.map(item => (\r\n                                    <ToDoItem\r\n                                        listId={listId}\r\n                                        id={item.id}\r\n                                        title={item.title}\r\n                                        description={item.description}\r\n                                        deadline={dayjs(item.deadline)}\r\n                                        status={item.status}\r\n                                        setList={setList}\r\n                                        list={list}\r\n                                        setShowList={setShowList}\r\n                                        showList={showList}\r\n                                    />\r\n                                ))\r\n                            ))}\r\n                        {addNewTask && !isPosting && (\r\n                            <Box component=\"form\" noValidate autoComplete=\"off\">\r\n                                <StyledTextField\r\n                                    id=\"outlined-basic\"\r\n                                    label=\"Title\"\r\n                                    variant=\"outlined\"\r\n                                    value={title}\r\n                                    onChange={handleChangeTitle}\r\n                                />\r\n                                <StyledTextField\r\n                                    id=\"outlined-multiline-flexible\"\r\n                                    label=\"Description\"\r\n                                    multiline\r\n                                    maxRows={4}\r\n                                    value={description}\r\n                                    onChange={handleChangeDescription}\r\n                                />\r\n                                <StyledDateTimePicker\r\n                                    label=\"Deadline\"\r\n                                    value={deadline}\r\n                                    onChange={handleChangeDeadline}\r\n                                    renderInput={params => (\r\n                                        <TextField {...params} />\r\n                                    )}\r\n                                />\r\n                            </Box>\r\n                        )}\r\n                        {addNewTask && isPosting && (\r\n                            <Box\r\n                                sx={{\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                }}\r\n                            >\r\n                                <CircularProgress color=\"inherit\" />\r\n                            </Box>\r\n                        )}\r\n                    </StyledDiv>\r\n                </CardContent>\r\n                {expandToDoList && !addNewTask && (\r\n                    <StyledCardActions sx={{ justifyContent: 'flex-end' }}>\r\n                        <StyledContainedButton\r\n                            onClick={handleClickOnNewTaskButton}\r\n                            variant=\"contained\"\r\n                            backgroundColor={color}\r\n                        >\r\n                            ADD NEW TASK\r\n                        </StyledContainedButton>\r\n                    </StyledCardActions>\r\n                )}\r\n                {addNewTask && !isPosting && (\r\n                    <StyledCardActions>\r\n                        <StyledOutlinedButton\r\n                            variant=\"outlined\"\r\n                            startIcon={<StyledDeleteIcon fillColor={color} />}\r\n                            onClick={handleClickOnDeleteButton}\r\n                            lineColor={color}\r\n                        >\r\n                            Delete\r\n                        </StyledOutlinedButton>\r\n                        <StyledContainedButton\r\n                            variant=\"contained\"\r\n                            onClick={handleClickOnSubmitButton}\r\n                            backgroundColor={color}\r\n                        >\r\n                            Submit\r\n                        </StyledContainedButton>\r\n                    </StyledCardActions>\r\n                )}\r\n            </Card>\r\n        </LocalizationProvider>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","import React, { FC } from 'react'\r\nimport Dialog from '@mui/material/Dialog'\r\nimport DialogActions from '@mui/material/DialogActions'\r\nimport DialogContent from '@mui/material/DialogContent'\r\nimport DialogTitle from '@mui/material/DialogTitle'\r\nimport TextField from '@mui/material/TextField'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport { StyledContainedButton, StyledOutlinedButton } from './ToDoList'\r\n\r\ninterface Props {\r\n    showModal: boolean\r\n    handleClickCloseModal: () => void\r\n    isPosting: boolean\r\n    title: string\r\n    handleChangeTitle: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n    handleClickOnAdd: () => void\r\n}\r\n\r\nconst MyModal: FC<Props> = ({\r\n    showModal,\r\n    handleClickCloseModal,\r\n    isPosting,\r\n    title,\r\n    handleChangeTitle,\r\n    handleClickOnAdd,\r\n}): JSX.Element => {\r\n    return (\r\n        <Dialog open={showModal} onClose={handleClickCloseModal}>\r\n            <DialogTitle id=\"responsive-dialog-title\">\r\n                {isPosting ? 'Adding ' : 'Add '}new TODO List\r\n            </DialogTitle>\r\n            {isPosting ? (\r\n                <DialogContent\r\n                    sx={{ display: 'flex', justifyContent: 'center' }}\r\n                >\r\n                    <CircularProgress color=\"inherit\" />\r\n                </DialogContent>\r\n            ) : (\r\n                <>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            sx={{ mt: 2 }}\r\n                            label=\"Title\"\r\n                            variant=\"outlined\"\r\n                            value={title}\r\n                            onChange={handleChangeTitle}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <StyledOutlinedButton\r\n                            variant=\"outlined\"\r\n                            lineColor=\"black\"\r\n                            onClick={handleClickCloseModal}\r\n                        >\r\n                            Delete\r\n                        </StyledOutlinedButton>\r\n                        <StyledContainedButton\r\n                            variant=\"contained\"\r\n                            backgroundColor=\"black\"\r\n                            onClick={handleClickOnAdd}\r\n                        >\r\n                            Add\r\n                        </StyledContainedButton>\r\n                    </DialogActions>\r\n                </>\r\n            )}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MyModal\r\n","import Grid from '@mui/material/Grid'\nimport React, { FC, useEffect, useState } from 'react'\nimport ToDoList from './Components/ToDoList'\nimport axios from 'axios'\nimport Typography from '@mui/material/Typography'\nimport { styled } from '@mui/system'\nimport AddIcon from '@mui/icons-material/Add'\nimport MyModal from './Components/MyModal'\n\nexport const client = axios.create({\n    baseURL: 'https://632812529a053ff9aaaf917a.mockapi.io/todo',\n})\n\nconst StyledTypography = styled(Typography)`\n    margin: 32px;\n`\n\nconst ContentGrid = styled(Grid)`\n    background-color: #f0f0f0;\n    height: 100%;\n`\n\nconst MyAddIcon = styled(AddIcon)`\n    height: 45px;\n    width: 45px;\n    border-radius: 50%;\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    fill: white;\n    background-color: black;\n`\nconst colorPalette = [\n    'tomato',\n    'gold',\n    'blueviolet',\n    'limegreen',\n    'orange',\n    'royalblue',\n]\n\nconst App: FC = (): JSX.Element => {\n    const [data, setData] = useState<any[]>([])\n    const [showModal, setShowModal] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>('')\n    const [isPosting, setIsPosting] = useState<boolean>(false)\n\n    useEffect(() => {\n        client.get('/todoLists').then(response => {\n            setData(response.data)\n            console.log(response.data)\n        })\n    }, [])\n\n    const handleClickOpenModal = () => {\n        setShowModal(true)\n    }\n\n    const handleClickCloseModal = () => {\n        setTitle('')\n        setShowModal(false)\n    }\n\n    const handleChangeTitle = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setTitle(event.target.value)\n    }\n\n    const handleClickOnAdd = () => {\n        setIsPosting(true)\n        client\n            .post('/todoLists', {\n                listTitle: title,\n            })\n            .then(response => {\n                setData([...data, response.data])\n                handleClickCloseModal()\n                setIsPosting(false)\n\n                client\n                    .post('/todoList', {\n                        listTitle: title,\n                        tasks: [],\n                    })\n                    .then(response => {})\n            })\n    }\n\n    return (\n        <Grid container>\n            <Grid container></Grid>\n            <ContentGrid container sx={{ m: 0 }}>\n                <StyledTypography variant=\"h3\">MY TODOs</StyledTypography>\n                <Grid\n                    container\n                    sx={{ p: 3 }}\n                    spacing={{ xs: 2, md: 3 }}\n                    columns={{ xs: 2, sm: 8, md: 12 }}\n                >\n                    {data.map(list => (\n                        <Grid item xs={2} sm={4} md={4} key={list.id}>\n                            <ToDoList\n                                key={list.id}\n                                listId={list.id}\n                                listTitle={list.listTitle}\n                                color={colorPalette[list.id % 5]}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n                {!showModal && <MyAddIcon onClick={handleClickOpenModal} />}\n                <MyModal\n                    showModal={showModal}\n                    handleClickCloseModal={handleClickCloseModal}\n                    isPosting={isPosting}\n                    title={title}\n                    handleChangeTitle={handleChangeTitle}\n                    handleClickOnAdd={handleClickOnAdd}\n                />\n            </ContentGrid>\n        </Grid>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}